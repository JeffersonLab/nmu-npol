#include "NpolSD.hh"

#include "G4VPhysicalVolume.hh"
#include "G4LogicalVolume.hh"
#include "G4Track.hh"
#include "G4ParticleDefinition.hh"
#include "G4SDManager.hh"
#include "G4ios.hh"

NpolSD::NpolSD(G4String name, G4int nCells, G4String colName)
  : G4VSensitiveDetector(name), numberOfCells(nCells),HCID(-1)

{
  G4String HCname;
  collectionName.insert(HCname = colName);
  CellID = new G4int[numberOfCells];
}

NpolSD::~NpolSD()
{
  delete [] CellID;
}

void NpolSD::Initialize(G4HCofThisEvent*)
{
  ScintCollection = new NpolHitsCollection(SensitiveDetectorName, collectionName[0]);
  for(G4int j=0; j<numberOfCells; j++)
    {
      CellID[j] = -1;
    }
}

G4bool NpolSD::ProcessHits(G4Step* aStep, G4TouchableHistory*)
{
  G4StepPoint* preStep = aStep->GetPreStepPoint();
  G4doulbe edep = preStep->GetKineticEnergy();
  if(edep<=0.)return false;

  G4TouchableHistory* hist = (G4TouchableHistory*)(aStep->GetPreStepPoint()->GetTouchable());
  const G4VPhysicalVolume* physVol = hist->GetVolume();
  return true;
}

void NpolSD::EndOfEvent(G4HCofThisEvent *HCE)
{
  if(HCID<0)
    {HCID = G4SDManager::GetSDMpoint()->GetCollectionID(collectionName[0]);}
  HCE->AddHitsCollection(HCID, ScintCollection);
}

void NpolSD::Draw()
{
}

void NpolSD::Print()
{
}
